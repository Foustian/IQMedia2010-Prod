Date.prototype.format = function(E) { var D = ""; var C = Date.replaceChars; for (var B = 0; B < E.length; B++) { var A = E.charAt(B); if (C[A]) { D += C[A].call(this) } else { D += A } } return D }; Date.replaceChars = { shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], longMonths: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], longDays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], d: function() { return (this.getDate() < 10 ? "0" : "") + this.getDate() }, D: function() { return Date.replaceChars.shortDays[this.getDay()] }, j: function() { return this.getDate() }, l: function() { return Date.replaceChars.longDays[this.getDay()] }, N: function() { return this.getDay() + 1 }, S: function() { return (this.getDate() % 10 == 1 && this.getDate() != 11 ? "st" : (this.getDate() % 10 == 2 && this.getDate() != 12 ? "nd" : (this.getDate() % 10 == 3 && this.getDate() != 13 ? "rd" : "th"))) }, w: function() { return this.getDay() }, z: function() { return "Not Yet Supported" }, W: function() { return "Not Yet Supported" }, F: function() { return Date.replaceChars.longMonths[this.getMonth()] }, m: function() { return (this.getMonth() < 9 ? "0" : "") + (this.getMonth() + 1) }, M: function() { return Date.replaceChars.shortMonths[this.getMonth()] }, n: function() { return this.getMonth() + 1 }, t: function() { return "Not Yet Supported" }, L: function() { return "Not Yet Supported" }, o: function() { return "Not Supported" }, Y: function() { return this.getFullYear() }, y: function() { return ("" + this.getFullYear()).substr(2) }, a: function() { return this.getHours() < 12 ? "am" : "pm" }, A: function() { return this.getHours() < 12 ? "AM" : "PM" }, B: function() { return "Not Yet Supported" }, g: function() { return this.getHours() % 12 || 12 }, G: function() { return this.getHours() }, h: function() { return ((this.getHours() % 12 || 12) < 10 ? "0" : "") + (this.getHours() % 12 || 12) }, H: function() { return (this.getHours() < 10 ? "0" : "") + this.getHours() }, i: function() { return (this.getMinutes() < 10 ? "0" : "") + this.getMinutes() }, s: function() { return (this.getSeconds() < 10 ? "0" : "") + this.getSeconds() }, e: function() { return "Not Yet Supported" }, I: function() { return "Not Supported" }, O: function() { return (this.getTimezoneOffset() < 0 ? "-" : "+") + (this.getTimezoneOffset() / 60 < 10 ? "0" : "") + (this.getTimezoneOffset() / 60) + "00" }, T: function() { return "Not Yet Supported" }, Z: function() { return this.getTimezoneOffset() * 60 }, c: function() { return "Not Yet Supported" }, r: function() { return this.toString() }, U: function() { return this.getTime() / 1000 } }; String.prototype.format = function() { var B = /\{\d+\}/g; var A = arguments; return this.replace(B, function(C) { return A[C.match(/\d+/)] }) }; function getParam(B) { B = B.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var A = "[\\?&]" + B + "=([^&#]*)"; var D = new RegExp(A); var C = D.exec(window.location.href); if (C == null) { return "" } else { return C[1] } } function getCookie(B) { var D = B + "="; var A = document.cookie.split(";"); for (var C = 0; C < A.length; C++) { var E = A[C]; while (E.charAt(0) == " ") { E = E.substring(1, E.length) } if (E.indexOf(D) == 0) { return E.substring(D.length, E.length) } } return null } function setCookie(B, D, A, C) { var E = new Date(); E.setDate(E.getDate() + A); document.cookie = B + "=" + escape(D) + ((A == null) ? "" : ";expires=" + E.toUTCString()) + ((C == null) ? "" : ";domain=" + C) } function deleteCookie(A) { document.cookie = A + "=; expires=Thu, 01-Jan-70 00:00:01 GMT;" } function detectEnterKey(B, C) { var A; if (window.event) { A = window.event.keyCode } else { if (B) { A = B.which } else { return true } } if (A == 13) { C(); return false } else { return true } } function stripIllegalCharacters(A) { A = A.replace(new RegExp("“", "gi"), "&quot;"); A = A.replace(new RegExp("’", "gi"), "&#39;"); A = A.replace(new RegExp("`", "gi"), "&#96;"); return A };