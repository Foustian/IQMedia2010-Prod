//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace IQMedia.Domain
{
    public partial class Clip
    {
        #region Primitive Properties
    
        public virtual System.Guid Guid
        {
            get;
            set;
        }
    
        public virtual int StartOffset
        {
            get;
            set;
        }
    
        public virtual int EndOffset
        {
            get;
            set;
        }
    
        public virtual System.Guid RecordfileGuid
        {
            get { return _recordfileGuid; }
            set
            {
                if (_recordfileGuid != value)
                {
                    if (Recordfile != null && Recordfile.Guid != value)
                    {
                        Recordfile = null;
                    }
                    _recordfileGuid = value;
                }
            }
        }
        private System.Guid _recordfileGuid;
    
        public virtual System.Guid UserGuid
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Recordfile Recordfile
        {
            get { return _recordfile; }
            set
            {
                if (!ReferenceEquals(_recordfile, value))
                {
                    var previousValue = _recordfile;
                    _recordfile = value;
                    FixupRecordfile(previousValue);
                }
            }
        }
        private Recordfile _recordfile;
    
        public virtual ICollection<ClipMeta> ClipMeta
        {
            get
            {
                if (_clipMeta == null)
                {
                    var newCollection = new FixupCollection<ClipMeta>();
                    newCollection.CollectionChanged += FixupClipMeta;
                    _clipMeta = newCollection;
                }
                return _clipMeta;
            }
            set
            {
                if (!ReferenceEquals(_clipMeta, value))
                {
                    var previousValue = _clipMeta as FixupCollection<ClipMeta>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClipMeta;
                    }
                    _clipMeta = value;
                    var newValue = value as FixupCollection<ClipMeta>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClipMeta;
                    }
                }
            }
        }
        private ICollection<ClipMeta> _clipMeta;
    
        public virtual ClipInfo ClipInfo
        {
            get { return _clipInfo; }
            set
            {
                if (!ReferenceEquals(_clipInfo, value))
                {
                    var previousValue = _clipInfo;
                    _clipInfo = value;
                    FixupClipInfo(previousValue);
                }
            }
        }
        private ClipInfo _clipInfo;

        #endregion
        #region Association Fixup
    
        private void FixupRecordfile(Recordfile previousValue)
        {
            if (previousValue != null && previousValue.Clips.Contains(this))
            {
                previousValue.Clips.Remove(this);
            }
    
            if (Recordfile != null)
            {
                if (!Recordfile.Clips.Contains(this))
                {
                    Recordfile.Clips.Add(this);
                }
                if (RecordfileGuid != Recordfile.Guid)
                {
                    RecordfileGuid = Recordfile.Guid;
                }
            }
        }
    
        private void FixupClipInfo(ClipInfo previousValue)
        {
            if (ClipInfo != null)
            {
                ClipInfo.ClipGuid = Guid;
            }
        }
    
        private void FixupClipMeta(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClipMeta item in e.NewItems)
                {
                    item.ClipGuid = Guid;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClipMeta item in e.OldItems)
                {
                }
            }
        }

        #endregion
    }
}
