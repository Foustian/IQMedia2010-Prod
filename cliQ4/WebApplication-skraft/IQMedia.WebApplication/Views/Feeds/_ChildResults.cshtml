@using IQMedia.Model;
@using IQMedia.Shared.Utility;
@using System.Text.RegularExpressions;
@using IQMedia.WebApplication.Models.TempData;
@model IQAgent_MediaResultsModel
@if (Model != null)
{
    ActiveUser sessioninfo = IQMedia.WebApplication.Utility.ActiveUserMgr.GetActiveUser();
    FeedsTempData feedsTempData = ((IQMedia.WebApplication.Controllers.FeedsController)this.ViewContext.Controller).GetTempData();
    int wordsBeforeSpan = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["HighlightWordsBeforeSpan"]);
    int wordsAfterSpan = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["HighlightWordsAfterSpan"]);
    string separator = "...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...";
    string highlightKeyword = "span";
    string mediaIconFormat = "../images/MediaIcon/{0}?v=1.3";

    string maxNegSentmtWidth = string.Empty;
    string maxPosSentmtWidth = string.Empty;
    string iqAdShareValue = string.Empty;
    string nielsen_Result = string.Empty;
    string NielsenAudience = string.Empty;
    string TotalNeilsenAudience = string.Empty;
    string TotalAdShareValue = string.Empty;
    string TotalNielsen_Result = string.Empty;
    bool useProminenceMediaValue = feedsTempData.UseProminenceMediaValue == true;

    Decimal? localAdShare = null;
    Decimal? childLocalAdShare = null;
    string sLocalAudience = string.Empty;
    string fLocalAudience = string.Empty;
    string sLocalMediaValue = string.Empty;
    string fLocalMediaValue = string.Empty;
    string sNationalAudience = string.Empty;
    string fNationalAudience = string.Empty;
    string sNationalMediaValue = string.Empty;
    string fNationalMediaValue = string.Empty;
                                    
    int Billion = 1000000000;
    decimal BillionD = 1000000000;
    int Million = 1000000;
    decimal MillionD = 1000000;

    DateTime mediaDate = DateTime.MinValue;
    switch (Model.MediaType)
    {
        case "TV":
            var media = (IQAgent_TVResultsModel)Model.MediaData;
            if (media != null) { mediaDate = media.LocalDateTime; }
            break;
        case "TM":
            var media2 = (IQAgent_TVEyesResultsModel)Model.MediaData;
            if (media2 != null) { mediaDate = media2.LocalDateTime; }
            break;
        default:
            mediaDate = Model.MediaDateTime;
            break;
    }

    switch (Model.MediaType)
    {
        case "TV":
            IQAgent_TVResultsModel iQAgent_TVResultsModel = (IQAgent_TVResultsModel)Model.MediaData;
            string highlightedText = string.Empty;
            string highlightedCCOutput = string.Empty;
            iqAdShareValue = string.Empty;

            if (iQAgent_TVResultsModel.highlightedCCOutput != null && iQAgent_TVResultsModel.highlightedCCOutput.CC != null)
            {
                highlightedCCOutput = string.Join(" ", iQAgent_TVResultsModel.highlightedCCOutput.CC.Select(c => c.Text));
            }

            highlightedCCOutput = highlightedCCOutput.Replace("&lt;", "<").Replace("&gt;", ">");

            if (highlightedCCOutput.Length > 180)
            {
                highlightedText = highlightedCCOutput.Substring(0, 180);
                highlightedText = System.Text.RegularExpressions.Regex.Replace(highlightedText, "(</span(?!>)|</spa(?!n>)|</sp(?!an>)|</s(?!pan>)|</(?!span>))\\Z", "</span>");
            }
            else
            {
                highlightedText = highlightedCCOutput;
            }

            highlightedText = CommonFunctions.ProcessHighlightingText(highlightedCCOutput, highlightedText);

            if ((Model.NegativeSentiment * 6) > 25)
            {
                maxNegSentmtWidth = "25px";
            }
            else
            {
                maxNegSentmtWidth = Convert.ToString(Model.NegativeSentiment * 6) + "px";
            }

            if ((Model.PositiveSentiment * 6) > 25)
            {
                maxPosSentmtWidth = "25px";
            }
            else
            {
                maxPosSentmtWidth = Convert.ToString(Model.PositiveSentiment * 6) + "px";
            }

            if (iQAgent_TVResultsModel.Nielsen_Audience.HasValue)
            {
                fLocalAudience = string.Format("{0:N0}", iQAgent_TVResultsModel.Nielsen_Audience);

                if (iQAgent_TVResultsModel.Nielsen_Audience >= Billion)
                {
                    sLocalAudience = string.Format("{0:F1} bil", iQAgent_TVResultsModel.Nielsen_Audience / BillionD);
                }
                else if (iQAgent_TVResultsModel.Nielsen_Audience >= Million)
                {
                    sLocalAudience = string.Format("{0:F1} mil", iQAgent_TVResultsModel.Nielsen_Audience / MillionD);
                }
                else
                {
                    sLocalAudience = fLocalAudience;
                }
            }
            else
            {
                sLocalAudience = "NA";
            }

            if (iQAgent_TVResultsModel.IQAdShareValue.HasValue && (useProminenceMediaValue == false || (iQAgent_TVResultsModel.IQProminenceMultiplier != null && Decimal.Compare(Convert.ToDecimal(iQAgent_TVResultsModel.IQProminenceMultiplier), 0M) != 0)))
            {
                localAdShare = useProminenceMediaValue ? (iQAgent_TVResultsModel.IQAdShareValue * iQAgent_TVResultsModel.IQProminenceMultiplier) : iQAgent_TVResultsModel.IQAdShareValue.Value;
                fLocalMediaValue = string.Format("{0:N2}", localAdShare);

                if (localAdShare >= BillionD)
                {
                    sLocalMediaValue = string.Format("{0:F1} bil", localAdShare / BillionD);
                }
                else if (localAdShare >= MillionD)
                {
                    sLocalMediaValue = string.Format("{0:F1} mil", localAdShare / MillionD);
                }
                else
                {
                    sLocalMediaValue = fLocalMediaValue;
                }

                if (!string.IsNullOrWhiteSpace(iQAgent_TVResultsModel.Nielsen_Result))
                {
                    nielsen_Result = iQAgent_TVResultsModel.Nielsen_Result.ToUpper();
                }
            }
            else
            {
                sLocalMediaValue = "NA";
            }

            decimal SumAdShareValue = iQAgent_TVResultsModel.National_IQAdShareValue.HasValue ? iQAgent_TVResultsModel.National_IQAdShareValue.Value : 0;
            if (SumAdShareValue > 0)
            {
                TotalNielsen_Result = iQAgent_TVResultsModel.National_Nielsen_Result;
                fNationalMediaValue = string.Format("{0:N2}", SumAdShareValue);

                if (SumAdShareValue >= BillionD)
                {
                    sNationalMediaValue = string.Format("{0:F1} bil", SumAdShareValue / BillionD);
                }
                else if (SumAdShareValue >= MillionD)
                {
                    sNationalMediaValue = string.Format("{0:F1} mil", SumAdShareValue / MillionD);
                }
                else
                {
                    sNationalMediaValue = fNationalMediaValue;
                }
            }

            long SumAudience = iQAgent_TVResultsModel.National_Nielsen_Audience.HasValue ? iQAgent_TVResultsModel.National_Nielsen_Audience.Value : 0;
            if (SumAudience > 0)
            {
                fNationalAudience = string.Format("{0:N0}", SumAudience);

                if (SumAudience >= Billion)
                {
                    sNationalAudience = string.Format("{0:F1} bil", SumAudience / BillionD);
                }
                else if (SumAudience >= Million)
                {
                    sNationalAudience = string.Format("{0:F1} mil", SumAudience / MillionD);
                }
                else
                {
                    sNationalAudience = fNationalAudience;
                }
            }                             
                
        <div class="MediaDate">
            <div class="post-date">
                <span class="month">@mediaDate.ToString("MMM", System.Globalization.CultureInfo.InvariantCulture)</span>
                <div>
                    <span class="today">@mediaDate.Day</span>
                </div>
                <span class="timeWithTimeZone">@mediaDate.ToString("hh:mm tt") @iQAgent_TVResultsModel.TimeZone</span>
            </div>
        </div>
        <div class="MediaTypeLogo" align="center">
            <img src="@iQAgent_TVResultsModel.StationLogo" title="@CommonFunctions.GetEnumDescription(CommonFunctions.CategoryType.TV)" />
        </div>
        <div class="float-right FeedsVideoSpacer">
            <div class="FeedsVideo positionRelative float-left">
                <a onclick="SetVideoParentID(@Model.ID); LoadPlayerbyAgentID('@Model.ID');" class="cursorPointer">
                    @{
                        string rawMediaThumbUrl = string.Empty;
                        if (!string.IsNullOrWhiteSpace(iQAgent_TVResultsModel.RawMediaThumbUrl))
                        {
                            rawMediaThumbUrl = iQAgent_TVResultsModel.RawMediaThumbUrl;
                        }
                        else
                        {
                            rawMediaThumbUrl = "../images/video.png";
                        }
                    }
                    <img class="media-object" src="@rawMediaThumbUrl" alt="" />
                    @if (!string.IsNullOrWhiteSpace(iQAgent_TVResultsModel.RawMediaThumbUrl))
                    {
                        <div class="PlayButton cursorPointer VideoPlayImageDiv">
                            <img id="ibtnPlay" src="../images/play.png" alt="" />
                        </div>  
                    }
                </a>
            </div>
            <div class="float-right">
                <input type="checkbox" value="@Model.ID:@Model.MediaType" id="chkdivResults_@Model.ID" onclick="CheckUncheckMasterCheckBox(this.id,'ulMediaResults','chkInputAll');" /></div>
                <input type="hidden" value="@iQAgent_TVResultsModel._ParentID" id="hdnParentID_@Model.ID" />
            <div class="clearfix">
            </div>
        </div>
        <div class="FeedsContentVideo">
            @{
                string tvTitle = string.Empty;
                
                if (iQAgent_TVResultsModel.Title120.Trim().Length > 65)
                {
                    tvTitle = iQAgent_TVResultsModel.Title120.Trim().Substring(0, 62) + "...";
                }
                else
                {
                    tvTitle = iQAgent_TVResultsModel.Title120.Trim();
                }
            }
            <div class="media-heading float-left" title="@iQAgent_TVResultsModel.Title120">
                @tvTitle
            </div>
            <div class="subheading float-left margintop1" >
                @Model.timeDifference
            </div>
            <div class="clear float-left media-body">
               @Html.Raw(highlightedText)
            </div>
        </div>
        <div class="clear post-divider"></div>
        <div class="clear margintop2 marginbottom2">
            <div class="FeedsActionBarLongLeftDiv">
                <div class="viewmore">
                @if (iQAgent_TVResultsModel.ChildResults != null && iQAgent_TVResultsModel.ChildResults.Count > 0)
                {
                    <a href="javascript:void(0);"  title="View More" onclick="ShowChild('@Model.ID', 'TV');">
                        <img alt="" id="expand_@Model.ID" src="../images/collapse.png" /></a>
                }
                </div>
                <div id="divLocationTV_@Model.ID" class="viewlocation">
                    <div class="">
                        @{
                            if (!string.IsNullOrWhiteSpace(iQAgent_TVResultsModel.Market))
                            {
                                <div class="location-tag" title="@iQAgent_TVResultsModel.Market">    
                                    @{
                                        if (iQAgent_TVResultsModel.Market.Trim().Length > 23)
                                        {
                                            @(iQAgent_TVResultsModel.Market.Trim().Substring(0, 21) + "...")
                                        }
                                        else
                                        {
                                            @iQAgent_TVResultsModel.Market.Trim()
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                            <div align="center" class="margintop2"></div>
                            }                                     
                        }
                    </div>
                </div>
                <div id="divSentimentTV_@Model.ID" class="viewsentiment" title="Sentiment">
                    <div class="sentimentLeftFloat sentiment-tag">
                        <div class="divSentimentMain sentimentFont">
                            <div class="divSentimentNeg">
                                <div style='width:@maxNegSentmtWidth'>
                                    @Model.NegativeSentiment
                                </div>
                            </div>
                            <div class="divSentimentPos">
                                <div style='width:@maxPosSentmtWidth'>
                                    @Model.PositiveSentiment
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="viewcontentdetail">
                    <div class="viewshortdetail">
                        @if (iQAgent_TVResultsModel.Nielsen_Audience > 0 && sessioninfo.IsNielsenData)
                        {
                            <div class="view" title="Local Audience @fLocalAudience">
                                @sLocalAudience
                            </div>
                        }
                        else
                        {
                            <div align="center" class="margintop2">
                            </div>
                        }  
                    </div>
                    <div class="viewshortdetail">
                        @if (localAdShare.HasValue && sessioninfo.IsNielsenData)
                        {
                            <div class="price"  title="Local Media Value @fLocalMediaValue">
                                @sLocalMediaValue @nielsen_Result
                            </div>
                        }
                        else
                        {
                            <div align="center" class="margintop2">
                            </div>
                        }  
                    </div>
                    <div class="viewlongdetail">
                        @if (!string.IsNullOrEmpty(fNationalAudience) && sessioninfo.IsNielsenData)
                        {
                            <div class="totalview" title="National Audience @fNationalAudience">
                                @sNationalAudience
                            </div>
                        }
                        else
                        {
                            <div align="center" class="margintop2">
                            </div>
                        }  
                    </div>
                    <div class="viewlongdetail">
                        @if (!string.IsNullOrEmpty(fNationalMediaValue) && sessioninfo.IsNielsenData)
                        {
                            <div class="totalprice"  title="National Media Value @fNationalMediaValue">
                                @sNationalMediaValue @TotalNielsen_Result
                            </div>
                        }
                        else
                        {
                            <div align="center" class="margintop2">
                            </div>
                        }  
                    </div>
                </div>
            </div>
            <div class="FeedsActionBarRightDiv minWidth52IE8">
                <div class="detailIcon">
                    <!--Padding Save Article-->
                    <div align="center" class="margintop2">
                    </div>
                </div>
                <div class="detailIcon">
                    <!--Padding View Article-->
                    <div align="center" class="margintop2">
                    </div>
                </div>
                <div class="detailIcon">
                    <!--Padding on the right-->
                    <div align="center" class="margintop2">
                    </div>
                </div>
            </div>
        </div>

            <div class="clear MediaChildContent" id="divChildMedia_@Model.ID">
                @foreach (IQAgent_MediaResultsModel childItem in iQAgent_TVResultsModel.ChildResults)
                {
                    IQAgent_TVResultsModel iQAgent_ChildTVResultsModel = (IQAgent_TVResultsModel)childItem.MediaData;
                    highlightedText = string.Empty;
                    highlightedCCOutput = string.Empty;
                    string sChildAudience = string.Empty;
                    string fChildAudience = string.Empty;
                    string sChildMediaValue = string.Empty;
                    string fChildMediaValue = string.Empty;

                    if (iQAgent_ChildTVResultsModel.highlightedCCOutput != null && iQAgent_ChildTVResultsModel.highlightedCCOutput.CC != null)
                    {
                        highlightedCCOutput = string.Join(" ", iQAgent_ChildTVResultsModel.highlightedCCOutput.CC.Select(c => c.Text));
                    }

                    highlightedCCOutput = highlightedCCOutput.Replace("&lt;", "<").Replace("&gt;", ">");

                    if (highlightedCCOutput.Length > 300)
                    {
                        highlightedText = highlightedCCOutput.Substring(0, 300);
                        highlightedText = System.Text.RegularExpressions.Regex.Replace(highlightedText, "(</span(?!>)|</spa(?!n>)|</sp(?!an>)|</s(?!pan>)|</(?!span>))\\Z", "</span>");
                    }
                    else
                    {
                        highlightedText = highlightedCCOutput;
                    }

                    highlightedText = CommonFunctions.ProcessHighlightingText(highlightedCCOutput, highlightedText);

                    if ((childItem.NegativeSentiment * 6) > 25)
                    {
                        maxNegSentmtWidth = "25px";
                    }
                    else
                    {
                        maxNegSentmtWidth = Convert.ToString(childItem.NegativeSentiment * 6) + "px";
                    }

                    if ((childItem.PositiveSentiment * 6) > 25)
                    {
                        maxPosSentmtWidth = "25px";
                    }
                    else
                    {
                        maxPosSentmtWidth = Convert.ToString(childItem.PositiveSentiment * 6) + "px";
                    }

                    if (iQAgent_ChildTVResultsModel.Nielsen_Audience.HasValue)
                    {
                        fChildAudience = string.Format("{0:n0}", iQAgent_ChildTVResultsModel.Nielsen_Audience);

                        if (iQAgent_ChildTVResultsModel.Nielsen_Audience >= Billion)
                        {
                            sChildAudience = string.Format("{0:F1} bil", iQAgent_ChildTVResultsModel.Nielsen_Audience / BillionD);
                        }
                        else if (iQAgent_ChildTVResultsModel.Nielsen_Audience >= Million)
                        {
                            sChildAudience = string.Format("{0:F1} mil", iQAgent_ChildTVResultsModel.Nielsen_Audience / MillionD);
                        }
                        else
                        {
                            sChildAudience = fChildAudience;
                        }
                    }

                    if (iQAgent_ChildTVResultsModel.IQAdShareValue.HasValue && (useProminenceMediaValue == false || (iQAgent_ChildTVResultsModel.IQProminenceMultiplier != null && Decimal.Compare(Convert.ToDecimal(iQAgent_ChildTVResultsModel.IQProminenceMultiplier), 0M) != 0)))
                    {
                        childLocalAdShare = useProminenceMediaValue ? (iQAgent_ChildTVResultsModel.IQAdShareValue.Value * iQAgent_ChildTVResultsModel.IQProminenceMultiplier) : iQAgent_ChildTVResultsModel.IQAdShareValue;
                        fChildMediaValue = string.Format("{0:N2}", childLocalAdShare);

                        if (childLocalAdShare >= BillionD)
                        {
                            sChildMediaValue = string.Format("{0:F1} bil", childLocalAdShare / BillionD);
                        }
                        else if (childLocalAdShare >= MillionD)
                        {
                            sChildMediaValue = string.Format("{0:F1} mil", childLocalAdShare / MillionD);
                        }
                        else
                        {
                            sChildMediaValue = fChildMediaValue;
                        }

                        if (!string.IsNullOrWhiteSpace(iQAgent_ChildTVResultsModel.Nielsen_Result))
                        {
                            nielsen_Result = iQAgent_ChildTVResultsModel.Nielsen_Result.ToUpper();
                        }
                    }
                    
                    <div class="clear post-divider-dark" style="width:94%; margin-left:2%;"></div>
                    <div class="" id="divMedia_@childItem.ID">
                        <div class="clear margintop2 marginbottom2">
                            <div class="FeedsActionBarLeftDiv">
                                <div class="viewmore">
                                    <div align="center" class="margintop2">
                                        <img alt="" style="height:20px; width:20px; vertical-align:top;" src="@iQAgent_ChildTVResultsModel.StationLogo" />
                                    </div>
                                </div>
                                <div id="divLocationTV_@childItem.ID" class="viewlocation">  
                                    <div class="">              
                                        @{
                                            if (!string.IsNullOrWhiteSpace(iQAgent_ChildTVResultsModel.Market))
                                            {
                                                <div class="location-tag" title="@iQAgent_ChildTVResultsModel.Market">    
                                                    @{
                                                        if (iQAgent_ChildTVResultsModel.Market.Trim().Length > 23)
                                                        {
                                                            @(iQAgent_ChildTVResultsModel.Market.Trim().Substring(0, 21) + "...")
                                                        }
                                                        else
                                                        {
                                                            @iQAgent_ChildTVResultsModel.Market.Trim()
                                                        }
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div align="center" class="margintop2"></div>
                                            }                                       
                                        }
                                    </div>
                                </div>
                                <div id="divSentimentTV_@childItem.ID" class="viewsentiment" title="@iQAgent_ChildTVResultsModel.LocalDateTime.ToString("MM/dd/yyyy hh:mm tt") @iQAgent_ChildTVResultsModel.TimeZone">
                                    @iQAgent_ChildTVResultsModel.LocalDateTime.ToString("hh:mm tt") @iQAgent_ChildTVResultsModel.TimeZone
                                </div>
                                <div class="viewcontentdetail">
                                    <div class="viewshortdetail">
                                        @if (Convert.ToDecimal(iQAgent_ChildTVResultsModel.Nielsen_Audience) > 0 && sessioninfo.IsNielsenData)
                                        {
                                            <div class="view" title="Local Audience @fChildAudience">
                                                @sChildAudience
                                            </div>
                                        }
                                        else
                                        {
                                            <div align="center" class="margintop2"></div>
                                        }
                                    </div>
                                    <div class="viewshortdetail">
                                        @if (childLocalAdShare.HasValue && sessioninfo.IsNielsenData)
                                        {
                                            <div class="price"  title="Local Media Value @fChildMediaValue">
                                                @sChildMediaValue @nielsen_Result
                                            </div>
                                        }
                                        else
                                        {
                                            <div align="center" class="margintop2"></div>
                                        }
                                    </div>
                                    <div class="viewlongdetail">
                                        <!--National Audience Filler-->
                                        <div align="center" class="margintop2"></div>
                                    </div>
                                    <div class="viewlongdetail">
                                        <!--National Media Value Filler-->
                                        <div align="center" class="margintop2"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="FeedsActionBarRightDiv minWidth52IE8">
                                <div class="detailIcon">
                                    <a onclick="SetVideoParentID(@childItem.ID); LoadPlayerbyAgentID('@childItem.ID');" class="cursorPointer float-right">
                                        <img width="20px" height="20px" id="ibtnPlay" src="../Images/Play.png" alt="" />
                                    </a>
                                </div>
                                <div class="detailIcon">
                                    <!--Padding View Article-->
                                    <div align="center" class="margintop2"></div>
                                </div>
                                <div class="detailIcon">
                                    <!--Padding on the right-->
                                    <div align="right" class="margintop2">
                                        <input type="checkbox" style="margin-top:0;" value="@childItem.ID:@childItem.MediaType" onclick="CheckUncheckMasterCheckBox(this.id,'ulMediaResults','chkInputAll');" id="chkdivChildResults_@childItem.ID"  />
                                    </div>
                                    <input type="hidden" value="@iQAgent_ChildTVResultsModel._ParentID" id="hdnParentID_@childItem.ID" />
                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

                break;
        case "NM":
                IQAgent_NewsResultsModel iQAgent_NewsResultsModel = (IQAgent_NewsResultsModel)Model.MediaData;

                string highlightedNewsText = string.Empty;
                string HighlightedNewsOutput = string.Empty;
                string highlightedOriginalText = string.Empty;
                iqAdShareValue = string.Empty;

                if (iQAgent_NewsResultsModel.HighlightedNewsOutput != null && iQAgent_NewsResultsModel.HighlightedNewsOutput.Highlights != null)
                {
                    highlightedOriginalText = string.Join(" ", iQAgent_NewsResultsModel.HighlightedNewsOutput.Highlights.Select(c => c));
                    HighlightedNewsOutput = IQMedia.Shared.Utility.CommonFunctions.GetWordsAround(highlightedOriginalText, highlightKeyword, wordsBeforeSpan, wordsAfterSpan, separator);

                    if (string.IsNullOrWhiteSpace(HighlightedNewsOutput))
                    {
                        HighlightedNewsOutput = highlightedOriginalText;
                    }
                }
                if (HighlightedNewsOutput.Length > 300)
                {
                    highlightedNewsText = HighlightedNewsOutput.Substring(0, 300);
                    highlightedNewsText = System.Text.RegularExpressions.Regex.Replace(highlightedNewsText, "(</span(?!>)|</spa(?!n>)|</sp(?!an>)|</s(?!pan>)|</(?!span>))\\Z", "</span>");
                }
                else
                {
                    highlightedNewsText = HighlightedNewsOutput;
                }

                highlightedNewsText = CommonFunctions.ProcessHighlightingText(HighlightedNewsOutput, highlightedNewsText);

                maxNegSentmtWidth = string.Empty;
                if ((Model.NegativeSentiment * 6) > 25)
                {
                    maxNegSentmtWidth = "25px";
                }
                else
                {
                    maxNegSentmtWidth = Convert.ToString(Model.NegativeSentiment * 6) + "px";
                }

                if ((Model.PositiveSentiment * 6) > 25)
                {
                    maxPosSentmtWidth = "25px";
                }
                else
                {
                    maxPosSentmtWidth = Convert.ToString(Model.PositiveSentiment * 6) + "px";
                }
                
                if (iQAgent_NewsResultsModel.Compete_Audience.HasValue && iQAgent_NewsResultsModel.Compete_Audience > 0)
                {
                    fLocalAudience = string.Format("{0:N0}", iQAgent_NewsResultsModel.Compete_Audience);

                    if (iQAgent_NewsResultsModel.Compete_Audience >= Billion)
                    {
                        sLocalAudience = string.Format("{0:F1} bil", iQAgent_NewsResultsModel.Compete_Audience / BillionD);
                    }
                    else if (iQAgent_NewsResultsModel.Compete_Audience >= Million)
                    {
                        sLocalAudience = string.Format("{0:F1} mil", iQAgent_NewsResultsModel.Compete_Audience / MillionD);
                    }
                    else
                    {
                        sLocalAudience = fLocalAudience;
                    }
                }
                else
                {
                    sLocalAudience = "NA";
                }

                if (iQAgent_NewsResultsModel.IQAdShareValue.HasValue && Decimal.Compare(Convert.ToDecimal(iQAgent_NewsResultsModel.IQAdShareValue), 0M) != 0 && (useProminenceMediaValue == false || (iQAgent_NewsResultsModel.IQProminenceMultiplier != null && Decimal.Compare(Convert.ToDecimal(iQAgent_NewsResultsModel.IQProminenceMultiplier), 0M) != 0)))
                {
                    localAdShare = useProminenceMediaValue ? (iQAgent_NewsResultsModel.IQAdShareValue.Value * iQAgent_NewsResultsModel.IQProminenceMultiplier) : iQAgent_NewsResultsModel.IQAdShareValue.Value;
                    fLocalMediaValue = string.Format("{0:N2}", localAdShare);

                    if (localAdShare >= BillionD)
                    {
                        sLocalMediaValue = string.Format("{0:F1} bil", localAdShare / BillionD);
                    }
                    else if (localAdShare >= MillionD)
                    {
                        sLocalMediaValue = string.Format("{0:F1} mil", localAdShare / MillionD);
                    }
                    else
                    {
                        sLocalMediaValue = fLocalMediaValue;
                    }
                }
                else
                {
                    sLocalMediaValue = "NA";
                }
                
        <div class="MediaDate">
            <div class="post-date">
                <span class="month">@mediaDate.ToString("MMM", System.Globalization.CultureInfo.InvariantCulture)</span>
                <div>
                    <span class="today">@mediaDate.Day</span>
                </div>
                <span class="timeWithTimeZone">@mediaDate.ToString("hh:mm tt") @sessioninfo.TimeZone</span>
            </div>
        </div>
        <div class="MediaTypeLogo" align="center">
            <img src="@String.Format(mediaIconFormat, "25onlinenews.png")" title="@CommonFunctions.GetEnumDescription(CommonFunctions.CategoryType.NM)" />
        </div>
        <div class="pull-right">
            <input type="checkbox" onclick="CheckUncheckMasterCheckBox(this.id,'ulMediaResults','chkInputAll');" value="@Model.ID:@Model.MediaType" id="chkdivResults_@Model.ID" />
            <input type="hidden" value="0" id="hdnParentID_@Model.ID" />
        </div>
        <div class="FeedsContentNone">
            @{
                string nmTitle = string.Empty;
                
                if (iQAgent_NewsResultsModel.Title.Trim().Length > 65)
                {
                    nmTitle = iQAgent_NewsResultsModel.Title.Trim().Substring(0, 62) + "...";
                }
                else
                {
                    nmTitle = iQAgent_NewsResultsModel.Title.Trim();
                }
            }
            <div class="media-heading float-left">           
                @if (iQAgent_NewsResultsModel.IQLicense == 3)
                {
                    <img src="@String.Format(mediaIconFormat, "LexisNexis_Small.png")" title="LexisNexis(R)" alt="LexisNexis(R)" class="lexisNexisImg" />
                }
                <a target="_blank" title="@iQAgent_NewsResultsModel.Title.Trim()" href="@(iQAgent_NewsResultsModel.IQLicense > 0 ? Url.Action("Index", "Article", new { au = IQMedia.Shared.Utility.CommonFunctions.EncryptLicenseStringAES(sessioninfo.CustomerKey + "¶Feeds¶" + iQAgent_NewsResultsModel.Url + "&u1=cliq40&u2=" + sessioninfo.ClientID + "¶" + iQAgent_NewsResultsModel.IQLicense) }) : iQAgent_NewsResultsModel.Url)">
                    @nmTitle
                </a>
            </div>
            <div class="subheading float-left margintop1" >
                @Model.timeDifference
            </div>
            <div class="clear float-left media-body">
                @Html.Raw(highlightedNewsText)
            </div>
        </div>
        <div class="clear post-divider"></div>
        <div class="clear margintop2 marginbottom2">
            <div class="FeedsActionBarLeftDiv">
                <div class="viewmore">
                    <a href="javascript:void(0);"  title="View More" onclick="ShowChild('@Model.ID', 'NM');">
                        <img alt="" id="expand_@Model.ID" src="../images/collapse.png" />
                    </a>
                </div>
                <div id="divLocationSM_@Model.ID" class="viewlocation">
                    <div class="">
                        @{
                            if (!string.IsNullOrWhiteSpace(iQAgent_NewsResultsModel.Publication))
                            {
                                <div id="lblCompete_@Model.ID" class="location-tag" title="@iQAgent_NewsResultsModel.Publication">
                                    @{
                                        if (iQAgent_NewsResultsModel.Publication.Trim().Length > 23)
                                        {
                                            @(iQAgent_NewsResultsModel.Publication.Trim().Substring(0, 21) + "...")
                                        }
                                        else
                                        {
                                            @iQAgent_NewsResultsModel.Publication.Trim()
                                        }
                                    }
                                </div>   
                            }
                            else
                            {
                                <div align="center" class="margintop2"></div>
                            }
                        }
                    </div>
                </div>
                <div id="divSentimentSM_@Model.ID" class="viewsentiment" title="Sentiment">
                    <div class="sentimentLeftFloat sentiment-tag">
                        <div class="divSentimentMain sentimentFont">
                            <div class="divSentimentNeg">
                                <div style='width:@maxNegSentmtWidth'>
                                    @Model.NegativeSentiment
                                </div>
                            </div>
                            <div class="divSentimentPos">
                                <div style='width:@maxPosSentmtWidth'>
                                    @Model.PositiveSentiment
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (sessioninfo.IsCompeteData)
                {
                    <div class="viewcontentdetail">
                        <div class="viewshortdetail">
                            <div class="view" title="Local Audience @fLocalAudience">
                                @sLocalAudience
                                @if (!string.IsNullOrWhiteSpace(iQAgent_NewsResultsModel.Compete_Result) && iQAgent_NewsResultsModel.Compete_Result.ToUpper() == "A")
                                {
                                    <img title="Powered by Compete" class="competeIcon" src="../Images/compete.png" alt="Compete Image" />
                                }
                                else
                                {
                                    <div align="center" class="margintop2"></div>
                                }
                            </div>
                        </div>
                        <div class="viewshortdetail">
                            <div class="price" title="Local Media Value @fLocalMediaValue">
                                @sLocalMediaValue
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="FeedsActionBarRightDiv minWidth52IE8">
                <div class="detailIcon">
                    <a class="cursorPointer saveMedia saveArticle" title="Save Article" onclick="ShowSaveArticle(@Model.ID,this.id);return false;" target="_blank" id="aSaveNM_@Model.ID"></a>
                </div>
                <div class="detailIcon">
                    <a class="cursorPointer viewArticle" title="View Article" href="@(iQAgent_NewsResultsModel.IQLicense > 0 ? Url.Action("Index", "Article", new { au = IQMedia.Shared.Utility.CommonFunctions.EncryptLicenseStringAES(sessioninfo.CustomerKey + "¶Feeds¶" + iQAgent_NewsResultsModel.Url + "&u1=cliq40&u2=" + sessioninfo.ClientID + "¶" + iQAgent_NewsResultsModel.IQLicense) }) : iQAgent_NewsResultsModel.Url)" target="_blank" id="aShowNews_@Model.ID" ></a>
                </div>
                <div class="detailIcon">
                    <!--Padding on the right-->
                    <div align="center" class="margintop2"></div>
                </div>
            </div>
        </div>

        <div class="clear MediaChildContent" id="divChildMedia_@Model.ID">
            @foreach (IQAgent_MediaResultsModel childItem in iQAgent_NewsResultsModel.ChildResults)
            {
                IQAgent_NewsResultsModel iQAgent_ChildNewsResultsModel = (IQAgent_NewsResultsModel)childItem.MediaData;
                string sChildAudience = string.Empty;
                string fChildAudience = string.Empty;
                string sChildMediaValue = string.Empty;
                string fChildMediaValue = string.Empty;

                maxNegSentmtWidth = string.Empty;
                if ((Model.NegativeSentiment * 6) > 25)
                {
                    maxNegSentmtWidth = "25px";
                }
                else
                {
                    maxNegSentmtWidth = Convert.ToString(Model.NegativeSentiment * 6) + "px";
                }

                if ((Model.PositiveSentiment * 6) > 25)
                {
                    maxPosSentmtWidth = "25px";
                }
                else
                {
                    maxPosSentmtWidth = Convert.ToString(Model.PositiveSentiment * 6) + "px";
                }
                
                <div class="clear post-divider-dark" style="width:94%; margin-left:2%;"></div>
                <div id="divMedia_@childItem.ID">
                    <div class="clear margintop2 marginbottom2">
                        <div class="FeedsActionBarLeftDiv">
                            <div class="viewmore">
                                <div align="center" class="margintop2">
                                    @if (iQAgent_ChildNewsResultsModel.IQLicense == 3)
                                    {
                                        <img src="@String.Format(mediaIconFormat, "LexisNexis_Small.png")" title="LexisNexis(R)" alt="LexisNexis(R)" class="lexisNexisImg" />
                                    }
                                </div>
                            </div>
                            <div class="viewlocation">
                                <div class="">
                                    @{
                                        if (!string.IsNullOrWhiteSpace(iQAgent_ChildNewsResultsModel.Publication))
                                        {
                                            <div id="lblCompete_@childItem.ID" class="location-tag" title="@iQAgent_ChildNewsResultsModel.Publication">
                                                @{
                                                    if (iQAgent_ChildNewsResultsModel.Publication.Trim().Length > 23)
                                                    {
                                                        @(iQAgent_ChildNewsResultsModel.Publication.Trim().Substring(0, 21) + "...")
                                                    }
                                                    else
                                                    {
                                                        @iQAgent_ChildNewsResultsModel.Publication.Trim()
                                                    }
                                                }
                                            </div>   
                                        }
                                        else
                                        {
                                            <div align="center" class="margintop2"></div>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="viewsentiment" title="@childItem.MediaDateTime.ToString("MM/dd/yyyy hh:mm tt") @sessioninfo.TimeZone">
                                <div class="">
                                    @childItem.MediaDateTime.ToString("hh:mm tt") @sessioninfo.TimeZone
                                </div>
                            </div>
                            @if (sessioninfo.IsCompeteData)
                            {
                                if (iQAgent_ChildNewsResultsModel.Compete_Audience.HasValue && iQAgent_ChildNewsResultsModel.Compete_Audience > 0)
                                {
                                    fChildAudience = string.Format("{0:N0}", iQAgent_ChildNewsResultsModel.Compete_Audience);

                                    if (iQAgent_ChildNewsResultsModel.Compete_Audience >= Billion)
                                    {
                                        sChildAudience = string.Format("{0:F1} bil", iQAgent_ChildNewsResultsModel.Compete_Audience / BillionD);
                                    }
                                    else if (iQAgent_ChildNewsResultsModel.Compete_Audience >= Million)
                                    {
                                        sChildAudience = string.Format("{0:F1} mil", iQAgent_ChildNewsResultsModel.Compete_Audience / MillionD);
                                    }
                                    else
                                    {
                                        sChildAudience = fChildAudience;
                                    }
                                }
                                else
                                {
                                    sChildAudience = "NA";
                                }

                                if (iQAgent_ChildNewsResultsModel.IQAdShareValue.HasValue && Decimal.Compare(Convert.ToDecimal(iQAgent_ChildNewsResultsModel.IQAdShareValue), 0M) != 0 && (useProminenceMediaValue == false || (iQAgent_ChildNewsResultsModel.IQProminenceMultiplier != null && Decimal.Compare(Convert.ToDecimal(iQAgent_ChildNewsResultsModel.IQProminenceMultiplier), 0M) != 0)))
                                {
                                    childLocalAdShare = useProminenceMediaValue ? (iQAgent_ChildNewsResultsModel.IQAdShareValue.Value * iQAgent_ChildNewsResultsModel.IQProminenceMultiplier) : iQAgent_ChildNewsResultsModel.IQAdShareValue.Value;
                                    fChildMediaValue = string.Format("{0:N2}", childLocalAdShare);

                                    if (childLocalAdShare >= BillionD)
                                    {
                                        sChildMediaValue = string.Format("{0:F1} bil", childLocalAdShare / BillionD);
                                    }
                                    else if (childLocalAdShare >= MillionD)
                                    {
                                        sChildMediaValue = string.Format("{0:F1} mil", childLocalAdShare / MillionD);
                                    }
                                    else
                                    {
                                        sChildMediaValue = fChildMediaValue;
                                    }
                                }
                                else
                                {
                                    sChildMediaValue = "NA";
                                }
                    
                                <div class="viewcontentdetail">
                                    <div class="viewshortdetail">
                                        <div class="view" title="Local Audience @fChildAudience">
                                            @sChildAudience
                                            @if (!string.IsNullOrWhiteSpace(iQAgent_ChildNewsResultsModel.Compete_Result) && iQAgent_ChildNewsResultsModel.Compete_Result.ToUpper() == "A")
                                            {
                                                <img title="Powered by Compete" class="competeIcon" src="../Images/compete.png" alt="Compete Image" />
                                            }
                                            else
                                            {
                                                <div align="center" class="margintop2"></div>
                                            }
                                        </div>
                                    </div>
                                    <div class="viewshortdetail">
                                        <div class="price" title="Local Media Value @fChildMediaValue">
                                            @sChildMediaValue @nielsen_Result
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="FeedsActionBarRightDiv minWidth52IE8">
                            <div class="detailIcon">
                                <a class="cursorPointer saveMedia saveArticle" title="Save Article" onclick="ShowSaveArticle(@Model.ID,this.id);return false;" target="_blank" id="aSaveNM_@Model.ID"></a>
                            </div>
                            <div class="detailIcon">
                                <a class="cursorPointer viewArticle" title="View Article" href="@(iQAgent_ChildNewsResultsModel.IQLicense > 0 ? Url.Action("Index", "Article", new { au = IQMedia.Shared.Utility.CommonFunctions.EncryptLicenseStringAES(sessioninfo.CustomerKey + "¶Feeds¶" + iQAgent_ChildNewsResultsModel.Url + "&u1=cliq40&u2=" + sessioninfo.ClientID + "¶" + iQAgent_ChildNewsResultsModel.IQLicense) }) : iQAgent_ChildNewsResultsModel.Url)" target="_blank" id="aShowNews_@Model.ID" ></a>
                            </div>
                            <div class="detailIcon">
                                <!--Padding on the right-->
                                <div align="right" class="margintop2">
                                    <input type="checkbox" style="margin-top:0;" value="@childItem.ID:@childItem.MediaType" onclick="CheckUncheckMasterCheckBox(this.id,'ulMediaResults','chkInputAll');" id="chkdivChildResults_@childItem.ID"  />
                                </div>
                                <input type="hidden" value="@iQAgent_ChildNewsResultsModel._ParentID" id="hdnParentID_@childItem.ID" />
                                <div class="clearfix"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
            break;
    }
}
