package tv.adap.proxy {        import flash.display.Loader;    import flash.display.LoaderInfo;    import flash.display.Sprite;    import flash.events.*;    import flash.net.URLRequest;    import flash.system.Security;    import flash.utils.Timer;    import flash.events.TimerEvent;	//import flash.utils.setTimeout;        /**     * A class which can display ads on top of a video.     */    public class AdaptvPlayer3 extends Sprite {                 public static const BREAK_STARTED:String    = 'breakStarted';        public static const BREAK_ENDED:String      = 'breakEnded';        public static const SCRIPT_FETCHED:String   = 'scriptFetched';        public static const CUSTOM:String           = 'custom';        public static const CLICK_THRU:String       = 'clickThru';        public static const LINEAR_CHANGED:String   = 'linearChanged';        public static const COMPANION:String        = 'companion';         		private static var adPlayerURL:String = "http://redir.adap.tv/redir/client/static/AS3AdPlayer.swf";		                            private var loader:Loader = new Loader();        private var adplayer:*;        private var config:Object;        private var callback:Object;                private var adPlayerLoadingTimer:Timer;        private var scriptFetchTimer:Timer;        private var sendDataTimer:Timer;        private var sendDataQueue:Array;        private var tmrContentPlayheadChanged:Timer;        private var contentPlayheadChangedMethod:Function;        //Limit calls to contentPlayheadChanged        private var lastContentPlayheadChangedTime:Number = 0;                                                            public function AdaptvPlayer3(callback:Object, mod:Object=null):void {              trace('AdaptvPlayer3('+callback+', '+mod+')');                  Security.allowDomain("*");            Security.allowInsecureDomain("*");                        this.config = config;            this.callback = callback;                        if (mod && mod.playerURL != undefined && mod.playerURL != '') {                adPlayerURL = mod.playerURL;            }                        if (mod && mod.redirectionURL != undefined) {                adPlayerURL = addParamsToURL(adPlayerURL, { redirectionOverride: mod.redirectionURL });            }            if (mod && mod.adaptvintegrate != undefined) {                adPlayerURL = addParamsToURL(adPlayerURL, { adaptvintegrate: mod.adaptvintegrate});            }            loader.contentLoaderInfo.addEventListener(Event.INIT, handleAdPlayerLoaded);            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR, errorHandler);                        //Setup timer for sending data to AdPlayer:            sendDataTimer = new Timer(250, 0);            sendDataTimer.addEventListener(TimerEvent.TIMER, sendData);              //Setup queue for sending data to AdPlayer:            sendDataQueue = new Array();                        //Set up an AdPlayer swf loading timeout            adPlayerLoadingTimer = new Timer(3000, 1);            adPlayerLoadingTimer.addEventListener("timer", adPlayerLoadingTimeout);            adPlayerLoadingTimer.start();            //Give 1 second to receive the ad script            scriptFetchTimer = new Timer(1000, 1);            scriptFetchTimer.addEventListener("timer", scriptFetchTimeOut);                        loader.load(new URLRequest(adPlayerURL));            addChild(loader);                    }                /*  -- AdPlayer load methods -- */        private function adPlayerLoadingTimeout(event:TimerEvent):void {            //trace('AdaptvPlayer3.adPlayerLoadingTimeout('+event+') adplayer: '+adplayer);                 if(!adplayer){                //If the adplayer swf has taken too long to load, cancel Adap.tv loading and play the video                //Notify player that it can start and there's no ads                if (callback.noAds) callback.noAds({type:"adPlayerLoadingTimeout", description:"Loading AdPlayer failed."});                else callback.onBreakEnded();                                this.parent.removeChild(this);            }        }                private function handleAdPlayerLoaded(event:Event):void {                           var loaderInfo:LoaderInfo = LoaderInfo(event.target);            adplayer = loaderInfo.content;            addChild(adplayer);            trace('AdaptvPlayer3.handleAdPlayerLoaded('+event+') adplayer: '+adplayer);                   adplayer.addEventListener(SCRIPT_FETCHED, onScriptFetched);            adplayer.addEventListener(BREAK_STARTED, onBreakStarted);            adplayer.addEventListener(BREAK_ENDED, onBreakEnded);            adplayer.addEventListener(CUSTOM, onCustom);            adplayer.addEventListener(CLICK_THRU, onClickThru);            adplayer.addEventListener(LINEAR_CHANGED, onLinearChanged);            adplayer.addEventListener(COMPANION, onCompanion);                        //trace('AdaptvPlayer3.handleAdPlayerLoaded('+event+') w/onCompanion event: '+COMPANION);                                            //Default API Version of 2.1, can be changed at start with apiVersion(version)            adplayer.apiVersion('2.1');			callback.adapTVLoaded();         }                   private function ioErrorHandler(event:IOErrorEvent):void {            //trace('AdaptvPlayer3.ioErrorHandler('+event+')');                 adPlayerLoadingTimer.stop();            adPlayerLoadingTimeout(new TimerEvent('adap.tv'));        }                private function errorHandler(event:ErrorEvent):void {            //trace('AdaptvPlayer3.errorHandler('+event+')');                   adPlayerLoadingTimer.stop();            adPlayerLoadingTimeout(new TimerEvent('adap.tv'));        }        /*  -- AdPlayer load methods END -- */                /*  -- AdPlayer call methods -- */                        /**         * Send API Version and get if supported         */        public function apiVersion(version:String):Boolean {            if (adplayer) return adplayer.apiVersion(version);            else {                sendDataQueue.push({apiVersion:version});                   if (!sendDataTimer.running) sendDataTimer.start();                                  return undefined;               }        }                /**         * Tries to send player content size to the AdPlayer.         */        public function setContentSize(width:Number, height:Number, fullscreen:Boolean):void {          //  trace('AdaptvPlayer3.setContentSize('+width+', '+height+', '+fullscreen+')');                   if (adplayer) adplayer.setContentSize(width, height, fullscreen);            else {                sendDataQueue.push({setContentSize:{width:width, height:height, fullscreen:fullscreen}});                   if (!sendDataTimer.running) sendDataTimer.start();                  }        }                   public function setHTMLSize(width:Number, height:Number, x:Number, y:Number):void {            //trace('AdaptvPlayer3.setHTMLSize('+width+', '+height+', '+x+', '+y+')');                  if (adplayer) adplayer.setHTMLSize(width, height, x, y);            else {                sendDataQueue.push({setHTMLSize:{width:width, height:height, x:x, y:y}});                   if (!sendDataTimer.running) sendDataTimer.start();                  }        }                public function setVolume(volume:Number):void {            //trace('AdaptvPlayer3.setVolume('+volume+')');                 if (adplayer) adplayer.setVolume(volume);            else {                sendDataQueue.push({setVolume:volume});                 if (!sendDataTimer.running) sendDataTimer.start();                  }        }                /**        * Send metadata to AdPlayer        */        public function setMetadata(config:Object):void {           //  trace('AdaptvPlayer3.setMetadata('+objectToString(config)+')');                 if (adplayer) adplayer.setMetadata(config);            else {                sendDataQueue.push({setMetadata:config});                   if (!sendDataTimer.running) sendDataTimer.start();                  }         }                /**        *         */        public function fetchScript():void {            //trace('AdaptvPlayer3.fetchScript()');                 if (adplayer) {                adplayer.fetchScript();                scriptFetchTimer.start();            }            else {                sendDataQueue.push({fetchScript:true});                 if (!sendDataTimer.running) sendDataTimer.start();                  }         }				/*		 public function handleVpaidEvent(param1:Object) : void        {            callback.handleVpaidEvent(param1);            return;        }		*/		                /**        *         */        public function startBreak():void {            //trace('AdaptvPlayer3.startBreak()');                  if (adplayer) adplayer.startBreak(); //breakIndex, duration);            else {                sendDataQueue.push({startBreak:true});                  if (!sendDataTimer.running) sendDataTimer.start();                  }         }                /**        *         */        public function endBreak():void {            //trace('AdaptvPlayer3.endBreak()');                    if (adplayer) adplayer.endBreak();            else {                sendDataQueue.push({endBreak:true});                    if (!sendDataTimer.running) sendDataTimer.start();                  }         }                /**        *         */        public function contentStarted():void {            if (adplayer) adplayer.contentStarted();            else {                sendDataQueue.push({contentStarted:true});                  if (!sendDataTimer.running) sendDataTimer.start();                  }         }                /**        *         */        public function contentEnded():void {            if (adplayer) adplayer.contentEnded();            else {                sendDataQueue.push({contentEnded:true});                    if (!sendDataTimer.running) sendDataTimer.start();                  }         }                public function contentPlayheadChanged(seconds:Number):void {            if (!adplayer) return; // throw away the call if we're not loaded            //Don't call more than every 500ms:            if (lastContentPlayheadChangedTime != 0 && (new Date()).getTime()-lastContentPlayheadChangedTime < 500) return;            lastContentPlayheadChangedTime = (new Date()).getTime();            adplayer.contentPlayheadChanged(seconds);        }                public function pause():void {            if (adplayer) adplayer.pause();            else {                sendDataQueue.push({pause:true});                   if (!sendDataTimer.running) sendDataTimer.start();                  }        }                public function resume():void {            if (adplayer) adplayer.resume();            else {                sendDataQueue.push({resume:true});                  if (!sendDataTimer.running) sendDataTimer.start();                  }        }                public function addJSCallback(jsCallbackObjectName:String):void {            if (adplayer) adplayer.addJSCallback(jsCallbackObjectName);            else {                sendDataQueue.push({addJSCallback:jsCallbackObjectName});                   if (!sendDataTimer.running) sendDataTimer.start();                  }        }        public function destroy():void {            if (adplayer) {				try {					adplayer.destroy();					//setTimeout(function() { adplayer.destroy(); }, 1000);				} catch(err:Error) {					//				}			}            else {				try {            	    sendDataQueue.push({destroy:true}); 				}				catch(err:Error)				{					//				}                if (!sendDataTimer.running) sendDataTimer.start();                  }        }        /*  -- AdPlayer call methods END -- */                /* -- Utilities -- */                private function sendData(event:TimerEvent):void {            if (adplayer) {                while (sendDataQueue.length > 0) {                    var data:Object = sendDataQueue.shift();                                        if (data.apiVersion) {                        adplayer.apiVersion(data.apiVersion);                    } else if (data.setMetadata) {                        adplayer.setMetadata(data.setMetadata);                    } else if (data.setContentSize) {                        adplayer.setContentSize(data.setContentSize.width, data.setContentSize.height, data.setContentSize.fullscreen);                    } else if (data.setHTMLSize) {                        adplayer.setHTMLSize(data.setHTMLSize.width, data.setHTMLSize.height, data.setHTMLSize.x, data.setHTMLSize.y);                    } else if (data.setVolume) {                        adplayer.setVolume(data.setVolume);                    } else if (data.setMetadata) {                        adplayer.setMetadata(data.setMetadata);                    } else if (data.fetchScript) {                        adplayer.fetchScript();                        scriptFetchTimer.start();                    } else if (data.startBreak) {                        adplayer.startBreak();                    } else if (data.endBreak) {                        adplayer.endBreak();                    } else if (data.contentStarted) {                        adplayer.contentStarted();                    } else if (data.contentEnded) {                        adplayer.contentEnded();                    } else if (data.pause) {                        adplayer.pause();                    } else if (data.resume) {                        adplayer.resume();                    } else if (data.addJSCallback) {                        adplayer.addJSCallback(data.addJSCallback);                    } else if (data.destroy) {                        adplayer.destroy();                    } else {                        sendDataTimer.stop();                       }                                    }            }        }                        /* -- AdPlayer callback event functions -- */        public function onScriptFetched(e:Object):void {            //trace('AdaptvPlayer3.onScriptFetched('+objectToString(e)+')');                scriptFetchTimer.stop();                callback.onScriptFetched(e);        }                public function onBreakStarted(e:Object):void {            //trace('AdaptvPlayer3.onBreakStarted('+objectToString(e)+')');                 callback.onBreakStarted(e);        }                public function onBreakEnded(e:Object):void {            //trace('AdaptvPlayer3.onBreakEnded('+objectToString(e)+')');                   callback.onBreakEnded(e);        }                public function onCustom(e:Object):void {            //trace('AdaptvPlayer3.onCustom('+objectToString(e)+')');                   // e.data (Object)            callback.onCustom(e);        }                 public function onClickThru(e:Object):void {            //trace('AdaptvPlayer3.onClickThru('+objectToString(e)+')');                    // e.data.url (String)            callback.onClickThru(e);        }                 public function onLinearChanged(e:Object):void {            //trace('AdaptvPlayer3.onLinearChanged('+objectToString(e)+')');                    // e.data.linear (Boolean)            callback.onLinearChanged(e);        }                 public function onCompanion(e:Object):void {            trace('AdaptvPlayer3.onCompanion('+objectToString(e)+') e.data: '+objectToString(e.data));                  //     *  e.companion_creative_type:  CreativeType.ANY, CreativeType.JPEG,  CreativeType.GIF, CreativeType.PNG, CreativeType.SWF, CreativeType.OTHER, CreativeType.JPEG_MIME, CreativeType.GIF_MIME, CreativeType.PNG_MIME, CreativeType.SWF_MIME            //     *  e.companion_width: [Number]            //     *  e.companion_height: [Number]            //     *  e.companion_display_data: if(type == CompanionResourceType.HTML) return companionHtmlTag;  else return creativeUrl;            //     *  e.companion_resource_type: CompanionResourceType.IFRAME, CompanionResourceType.SCRIPT, CompanionResourceType.HTML, CompanionResourceType.STATIC, CompanionResourceType.OTHER            //     *  e.companion_click_thru: [url String]            //     *  e.player_handles: [Boolean if AdPlayer handles companion]            callback.onCompanion(e);        }                /* -- Utilities -- */        public function startContentPlayheadChanged(contentPlayheadChangedMethod:Function):void {            this.contentPlayheadChangedMethod = contentPlayheadChangedMethod;            if (tmrContentPlayheadChanged && tmrContentPlayheadChanged.running) tmrContentPlayheadChanged.stop();            tmrContentPlayheadChanged = new Timer(800, 0);            tmrContentPlayheadChanged.addEventListener(TimerEvent.TIMER, onContentPlayheadChanged);              tmrContentPlayheadChanged.start();         }                public function stopContentPlayheadChanged():void {            if (tmrContentPlayheadChanged && tmrContentPlayheadChanged.running) tmrContentPlayheadChanged.stop();        }                private function onContentPlayheadChanged(event:TimerEvent):void {              this.contentPlayheadChanged(contentPlayheadChangedMethod());          }                private function scriptFetchTimeOut(event:TimerEvent=null):void {            //trace('AdaptvPlayer3.scriptFetchTimeOut');            if (callback.noAds) callback.noAds({type:"scriptFetchTimeOut", description:"Failed to retrieve ad script."});            else callback.onBreakEnded();        }                private function addParamsToURL(baseURL:String, params:Object):String{            var returnURL:String = baseURL;                        var PARAM_SEPARATOR:String;            if(returnURL.indexOf("?") == -1){                PARAM_SEPARATOR = "?";            } else {                PARAM_SEPARATOR = "&";            }                        for(var param:String in params){                if(params[param] != undefined &&                   (typeof(params[param]) != "number" || !isNaN(params[param]))){                    returnURL += PARAM_SEPARATOR;                    returnURL += param;                    returnURL += "=";                    returnURL += escape(params[param]);                    PARAM_SEPARATOR = "&";                }            }            return returnURL;        }                                    private function objectToString(o:Object):String {             var returnString:String = "";            for(var property:String in o) {                if (returnString.length > 0){                    returnString += ", ";   }                returnString += property;                returnString += ":";                returnString += o[property];    }				trace("DATA: "+returnString);            return returnString;            }    }                                      }