//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace IQMediaGroup.CoreServices.Domain
{
    public partial class IQMediaGroupEntities : ObjectContext
    {
        public const string ConnectionString = "name=IQMediaGroupEntities";
        public const string ContainerName = "IQMediaGroupEntities";
    
        #region Constructors
    
        public IQMediaGroupEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<IQ_Five_Min_Staging> IQ_Five_Min_Staging
        {
            get { return _iQ_Five_Min_Staging  ?? (_iQ_Five_Min_Staging = CreateObjectSet<IQ_Five_Min_Staging>("IQ_Five_Min_Staging")); }
        }
        private ObjectSet<IQ_Five_Min_Staging> _iQ_Five_Min_Staging;

        #endregion
        #region Function Imports
        public ObjectResult<string> Insert_IQCore_RecordFile(ObjectParameter recordFileGuid, ObjectParameter destinationFile, string fileExtension, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> endOffset, Nullable<System.Guid> sourceGuid, Nullable<int> recordFileTypeID, Nullable<int> rootPathID, string status, Nullable<bool> isUGC, string uGCMetaData, ObjectParameter message)
        {
    
            ObjectParameter fileExtensionParameter;
    
            if (fileExtension != null)
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", fileExtension);
            }
            else
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", typeof(string));
            }
    
            ObjectParameter startDateParameter;
    
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(System.DateTime));
            }
    
            ObjectParameter endDateParameter;
    
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(System.DateTime));
            }
    
            ObjectParameter endOffsetParameter;
    
            if (endOffset.HasValue)
            {
                endOffsetParameter = new ObjectParameter("EndOffset", endOffset);
            }
            else
            {
                endOffsetParameter = new ObjectParameter("EndOffset", typeof(int));
            }
    
            ObjectParameter sourceGuidParameter;
    
            if (sourceGuid.HasValue)
            {
                sourceGuidParameter = new ObjectParameter("SourceGuid", sourceGuid);
            }
            else
            {
                sourceGuidParameter = new ObjectParameter("SourceGuid", typeof(System.Guid));
            }
    
            ObjectParameter recordFileTypeIDParameter;
    
            if (recordFileTypeID.HasValue)
            {
                recordFileTypeIDParameter = new ObjectParameter("RecordFileTypeID", recordFileTypeID);
            }
            else
            {
                recordFileTypeIDParameter = new ObjectParameter("RecordFileTypeID", typeof(int));
            }
    
            ObjectParameter rootPathIDParameter;
    
            if (rootPathID.HasValue)
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", rootPathID);
            }
            else
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", typeof(int));
            }
    
            ObjectParameter statusParameter;
    
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(string));
            }
    
            ObjectParameter isUGCParameter;
    
            if (isUGC.HasValue)
            {
                isUGCParameter = new ObjectParameter("IsUGC", isUGC);
            }
            else
            {
                isUGCParameter = new ObjectParameter("IsUGC", typeof(bool));
            }
    
            ObjectParameter uGCMetaDataParameter;
    
            if (uGCMetaData != null)
            {
                uGCMetaDataParameter = new ObjectParameter("UGCMetaData", uGCMetaData);
            }
            else
            {
                uGCMetaDataParameter = new ObjectParameter("UGCMetaData", typeof(string));
            }
            return base.ExecuteFunction<string>("Insert_IQCore_RecordFile", recordFileGuid, destinationFile, fileExtensionParameter, startDateParameter, endDateParameter, endOffsetParameter, sourceGuidParameter, recordFileTypeIDParameter, rootPathIDParameter, statusParameter, isUGCParameter, uGCMetaDataParameter, message);
        }
        public ObjectResult<Nullable<int>> Update_IQCore_RecordFile(Nullable<System.Guid> recordfileID, string location, Nullable<int> endOffset, Nullable<int> rootPathID)
        {
    
            ObjectParameter recordfileIDParameter;
    
            if (recordfileID.HasValue)
            {
                recordfileIDParameter = new ObjectParameter("RecordfileID", recordfileID);
            }
            else
            {
                recordfileIDParameter = new ObjectParameter("RecordfileID", typeof(System.Guid));
            }
    
            ObjectParameter locationParameter;
    
            if (location != null)
            {
                locationParameter = new ObjectParameter("Location", location);
            }
            else
            {
                locationParameter = new ObjectParameter("Location", typeof(string));
            }
    
            ObjectParameter endOffsetParameter;
    
            if (endOffset.HasValue)
            {
                endOffsetParameter = new ObjectParameter("EndOffset", endOffset);
            }
            else
            {
                endOffsetParameter = new ObjectParameter("EndOffset", typeof(int));
            }
    
            ObjectParameter rootPathIDParameter;
    
            if (rootPathID.HasValue)
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", rootPathID);
            }
            else
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Update_IQCore_RecordFile", recordfileIDParameter, locationParameter, endOffsetParameter, rootPathIDParameter);
        }
        public ObjectResult<Nullable<long>> InsertFiveMinStaging(string iQCCKey)
        {
    
            ObjectParameter iQCCKeyParameter;
    
            if (iQCCKey != null)
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", iQCCKey);
            }
            else
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", typeof(string));
            }
            return base.ExecuteFunction<Nullable<long>>("InsertFiveMinStaging", iQCCKeyParameter);
        }
        public ObjectResult<FiveMinStaging> GetFiveMinStagingByIQCCKey(string iQCCKey)
        {
    
            ObjectParameter iQCCKeyParameter;
    
            if (iQCCKey != null)
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", iQCCKey);
            }
            else
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", typeof(string));
            }
            return base.ExecuteFunction<FiveMinStaging>("GetFiveMinStagingByIQCCKey", iQCCKeyParameter);
        }
        public ObjectResult<Nullable<int>> UpdateFiveMinStaging(string iQCCKey, Nullable<System.Guid> recordFileGuid, Nullable<int> lastMediaSegment, string mediaStatus, string mediaFilename)
        {
    
            ObjectParameter iQCCKeyParameter;
    
            if (iQCCKey != null)
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", iQCCKey);
            }
            else
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", typeof(string));
            }
    
            ObjectParameter recordFileGuidParameter;
    
            if (recordFileGuid.HasValue)
            {
                recordFileGuidParameter = new ObjectParameter("RecordFileGuid", recordFileGuid);
            }
            else
            {
                recordFileGuidParameter = new ObjectParameter("RecordFileGuid", typeof(System.Guid));
            }
    
            ObjectParameter lastMediaSegmentParameter;
    
            if (lastMediaSegment.HasValue)
            {
                lastMediaSegmentParameter = new ObjectParameter("LastMediaSegment", lastMediaSegment);
            }
            else
            {
                lastMediaSegmentParameter = new ObjectParameter("LastMediaSegment", typeof(int));
            }
    
            ObjectParameter mediaStatusParameter;
    
            if (mediaStatus != null)
            {
                mediaStatusParameter = new ObjectParameter("MediaStatus", mediaStatus);
            }
            else
            {
                mediaStatusParameter = new ObjectParameter("MediaStatus", typeof(string));
            }
    
            ObjectParameter mediaFilenameParameter;
    
            if (mediaFilename != null)
            {
                mediaFilenameParameter = new ObjectParameter("MediaFilename", mediaFilename);
            }
            else
            {
                mediaFilenameParameter = new ObjectParameter("MediaFilename", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateFiveMinStaging", iQCCKeyParameter, recordFileGuidParameter, lastMediaSegmentParameter, mediaStatusParameter, mediaFilenameParameter);
        }
        public ObjectResult<RootPath> GetActiveRootPathByIP(string ip_adress_mask)
        {
    
            ObjectParameter ip_adress_maskParameter;
    
            if (ip_adress_mask != null)
            {
                ip_adress_maskParameter = new ObjectParameter("ip_adress_mask", ip_adress_mask);
            }
            else
            {
                ip_adress_maskParameter = new ObjectParameter("ip_adress_mask", typeof(string));
            }
            return base.ExecuteFunction<RootPath>("GetActiveRootPathByIP", ip_adress_maskParameter);
        }
        public ObjectResult<Nullable<long>> UpdateRootPathStatus(Nullable<long> iD, Nullable<bool> status)
        {
    
            ObjectParameter iDParameter;
    
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(long));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<long>>("UpdateRootPathStatus", iDParameter, statusParameter);
        }
        public ObjectResult<Nullable<System.Guid>> GetSourceGUIDBySourceID(string sourceID)
        {
    
            ObjectParameter sourceIDParameter;
    
            if (sourceID != null)
            {
                sourceIDParameter = new ObjectParameter("SourceID", sourceID);
            }
            else
            {
                sourceIDParameter = new ObjectParameter("SourceID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("GetSourceGUIDBySourceID", sourceIDParameter);
        }

        #endregion
    }
}
