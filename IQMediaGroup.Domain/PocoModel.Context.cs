//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace IQMediaGroup.Domain
{
    public partial class IQMediaGroupISVCEntities : ObjectContext
    {
        public const string ConnectionString = "name=IQMediaGroupISVCEntities";
        public const string ContainerName = "IQMediaGroupISVCEntities";
    
        #region Constructors
    
        public IQMediaGroupISVCEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupISVCEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupISVCEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<ArchiveClip> ArchiveClips
        {
            get { return _archiveClips  ?? (_archiveClips = CreateObjectSet<ArchiveClip>("ArchiveClips")); }
        }
        private ObjectSet<ArchiveClip> _archiveClips;
    
        public ObjectSet<ClipDownload> ClipDownloads
        {
            get { return _clipDownloads  ?? (_clipDownloads = CreateObjectSet<ClipDownload>("ClipDownloads")); }
        }
        private ObjectSet<ClipDownload> _clipDownloads;
    
        public ObjectSet<ClipDownloadSetting> ClipDownloadSettings
        {
            get { return _clipDownloadSettings  ?? (_clipDownloadSettings = CreateObjectSet<ClipDownloadSetting>("ClipDownloadSettings")); }
        }
        private ObjectSet<ClipDownloadSetting> _clipDownloadSettings;
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<IQService_UGCRawClipExport> IQService_UGCRawClipExport
        {
            get { return _iQService_UGCRawClipExport  ?? (_iQService_UGCRawClipExport = CreateObjectSet<IQService_UGCRawClipExport>("IQService_UGCRawClipExport")); }
        }
        private ObjectSet<IQService_UGCRawClipExport> _iQService_UGCRawClipExport;
    
        public ObjectSet<RawMediaPlayLog> RawMediaPlayLogs
        {
            get { return _rawMediaPlayLogs  ?? (_rawMediaPlayLogs = CreateObjectSet<RawMediaPlayLog>("RawMediaPlayLogs")); }
        }
        private ObjectSet<RawMediaPlayLog> _rawMediaPlayLogs;
    
        public ObjectSet<RawMediaPlaySummary> RawMediaPlaySummaries
        {
            get { return _rawMediaPlaySummaries  ?? (_rawMediaPlaySummaries = CreateObjectSet<RawMediaPlaySummary>("RawMediaPlaySummaries")); }
        }
        private ObjectSet<RawMediaPlaySummary> _rawMediaPlaySummaries;
    
        public ObjectSet<RawMediaImpressionSummary> RawMediaImpressionSummaries
        {
            get { return _rawMediaImpressionSummaries  ?? (_rawMediaImpressionSummaries = CreateObjectSet<RawMediaImpressionSummary>("RawMediaImpressionSummaries")); }
        }
        private ObjectSet<RawMediaImpressionSummary> _rawMediaImpressionSummaries;

        #endregion
        #region Function Imports
        public ObjectResult<ArchiveClipDB> GetArchiveClipDataByClipID(Nullable<System.Guid> clipID)
        {
    
            ObjectParameter clipIDParameter;
    
            if (clipID.HasValue)
            {
                clipIDParameter = new ObjectParameter("ClipID", clipID);
            }
            else
            {
                clipIDParameter = new ObjectParameter("ClipID", typeof(System.Guid));
            }
            return base.ExecuteFunction<ArchiveClipDB>("GetArchiveClipDataByClipID", clipIDParameter);
        }
        public ObjectResult<string> GetClipFormat(Nullable<System.Guid> clipID)
        {
    
            ObjectParameter clipIDParameter;
    
            if (clipID.HasValue)
            {
                clipIDParameter = new ObjectParameter("ClipID", clipID);
            }
            else
            {
                clipIDParameter = new ObjectParameter("ClipID", typeof(System.Guid));
            }
            return base.ExecuteFunction<string>("GetClipFormat", clipIDParameter);
        }
        public ObjectResult<PlayerUGCRawMediaData> GetPlayerDataForIQUGCArchive(Nullable<System.Guid> uGCGUID)
        {
    
            ObjectParameter uGCGUIDParameter;
    
            if (uGCGUID.HasValue)
            {
                uGCGUIDParameter = new ObjectParameter("UGCGUID", uGCGUID);
            }
            else
            {
                uGCGUIDParameter = new ObjectParameter("UGCGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<PlayerUGCRawMediaData>("GetPlayerDataForIQUGCArchive", uGCGUIDParameter);
        }
        public ObjectResult<Nullable<bool>> CheckForMicrositeAccessByClientGUID(Nullable<System.Guid> clientGUID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckForMicrositeAccessByClientGUID", clientGUIDParameter);
        }
        public ObjectResult<string> GetIQCoreRecordfileMetaPathByClipGUID(Nullable<System.Guid> clipGUID)
        {
    
            ObjectParameter clipGUIDParameter;
    
            if (clipGUID.HasValue)
            {
                clipGUIDParameter = new ObjectParameter("ClipGUID", clipGUID);
            }
            else
            {
                clipGUIDParameter = new ObjectParameter("ClipGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<string>("GetIQCoreRecordfileMetaPathByClipGUID", clipGUIDParameter);
        }
        public ObjectResult<Nullable<long>> InsertOutBoundReporting(string query_Name, string fromEmailAddress, string toEmailAddress, string mailContent, string serviceType, ObjectParameter outboundReportingKey)
        {
    
            ObjectParameter query_NameParameter;
    
            if (query_Name != null)
            {
                query_NameParameter = new ObjectParameter("Query_Name", query_Name);
            }
            else
            {
                query_NameParameter = new ObjectParameter("Query_Name", typeof(string));
            }
    
            ObjectParameter fromEmailAddressParameter;
    
            if (fromEmailAddress != null)
            {
                fromEmailAddressParameter = new ObjectParameter("FromEmailAddress", fromEmailAddress);
            }
            else
            {
                fromEmailAddressParameter = new ObjectParameter("FromEmailAddress", typeof(string));
            }
    
            ObjectParameter toEmailAddressParameter;
    
            if (toEmailAddress != null)
            {
                toEmailAddressParameter = new ObjectParameter("ToEmailAddress", toEmailAddress);
            }
            else
            {
                toEmailAddressParameter = new ObjectParameter("ToEmailAddress", typeof(string));
            }
    
            ObjectParameter mailContentParameter;
    
            if (mailContent != null)
            {
                mailContentParameter = new ObjectParameter("MailContent", mailContent);
            }
            else
            {
                mailContentParameter = new ObjectParameter("MailContent", typeof(string));
            }
    
            ObjectParameter serviceTypeParameter;
    
            if (serviceType != null)
            {
                serviceTypeParameter = new ObjectParameter("ServiceType", serviceType);
            }
            else
            {
                serviceTypeParameter = new ObjectParameter("ServiceType", typeof(string));
            }
            return base.ExecuteFunction<Nullable<long>>("InsertOutBoundReporting", query_NameParameter, fromEmailAddressParameter, toEmailAddressParameter, mailContentParameter, serviceTypeParameter, outboundReportingKey);
        }
        public ObjectResult<CustomCategoryData> GetCustomCategoryByClientGUID(Nullable<System.Guid> clientGUID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<CustomCategoryData>("GetCustomCategoryByClientGUID", clientGUIDParameter);
        }
        public ObjectResult<Nullable<System.Guid>> GetRecordfileGUIDbyClipGUID(Nullable<System.Guid> gUID)
        {
    
            ObjectParameter gUIDParameter;
    
            if (gUID.HasValue)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("GetRecordfileGUIDbyClipGUID", gUIDParameter);
        }
        public ObjectResult<ArchiveClipService> GetArchiveClipDataAndImageContentByClipID(Nullable<System.Guid> clipID)
        {
    
            ObjectParameter clipIDParameter;
    
            if (clipID.HasValue)
            {
                clipIDParameter = new ObjectParameter("ClipID", clipID);
            }
            else
            {
                clipIDParameter = new ObjectParameter("ClipID", typeof(System.Guid));
            }
            return base.ExecuteFunction<ArchiveClipService>("GetArchiveClipDataAndImageContentByClipID", clipIDParameter);
        }
        public ObjectResult<string> GetClientPlayerLogoByClipGUID(Nullable<System.Guid> clipID)
        {
    
            ObjectParameter clipIDParameter;
    
            if (clipID.HasValue)
            {
                clipIDParameter = new ObjectParameter("ClipID", clipID);
            }
            else
            {
                clipIDParameter = new ObjectParameter("ClipID", typeof(System.Guid));
            }
            return base.ExecuteFunction<string>("GetClientPlayerLogoByClipGUID", clipIDParameter);
        }
        public ObjectResult<Nullable<bool>> CheckForNielSenDataAccessByClientGUID(Nullable<System.Guid> clientGUID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckForNielSenDataAccessByClientGUID", clientGUIDParameter);
        }
        public ObjectResult<NielSenDataDB> GetNielSenDataByGuid(Nullable<System.Guid> guid, Nullable<bool> isRawMedia, Nullable<int> iQ_Start_Point, string iQ_Dma_Num, Nullable<System.Guid> clientGuid)
        {
    
            ObjectParameter guidParameter;
    
            if (guid.HasValue)
            {
                guidParameter = new ObjectParameter("Guid", guid);
            }
            else
            {
                guidParameter = new ObjectParameter("Guid", typeof(System.Guid));
            }
    
            ObjectParameter isRawMediaParameter;
    
            if (isRawMedia.HasValue)
            {
                isRawMediaParameter = new ObjectParameter("IsRawMedia", isRawMedia);
            }
            else
            {
                isRawMediaParameter = new ObjectParameter("IsRawMedia", typeof(bool));
            }
    
            ObjectParameter iQ_Start_PointParameter;
    
            if (iQ_Start_Point.HasValue)
            {
                iQ_Start_PointParameter = new ObjectParameter("IQ_Start_Point", iQ_Start_Point);
            }
            else
            {
                iQ_Start_PointParameter = new ObjectParameter("IQ_Start_Point", typeof(int));
            }
    
            ObjectParameter iQ_Dma_NumParameter;
    
            if (iQ_Dma_Num != null)
            {
                iQ_Dma_NumParameter = new ObjectParameter("IQ_Dma_Num", iQ_Dma_Num);
            }
            else
            {
                iQ_Dma_NumParameter = new ObjectParameter("IQ_Dma_Num", typeof(string));
            }
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<NielSenDataDB>("GetNielSenDataByGuid", guidParameter, isRawMediaParameter, iQ_Start_PointParameter, iQ_Dma_NumParameter, clientGuidParameter);
        }
        public ObjectResult<Nullable<System.Guid>> GetVideoGuidByiQAgentiFrameID(Nullable<System.Guid> iQAgentiFrameID)
        {
    
            ObjectParameter iQAgentiFrameIDParameter;
    
            if (iQAgentiFrameID.HasValue)
            {
                iQAgentiFrameIDParameter = new ObjectParameter("iQAgentiFrameID", iQAgentiFrameID);
            }
            else
            {
                iQAgentiFrameIDParameter = new ObjectParameter("iQAgentiFrameID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("GetVideoGuidByiQAgentiFrameID", iQAgentiFrameIDParameter);
        }
        public ObjectResult<IQAgentIframe> InsertIQAgentIframe(Nullable<System.Guid> rawMediaGuid, Nullable<System.DateTime> expiry_Date, Nullable<long> iQAgentResultID, string dataModelType)
        {
    
            ObjectParameter rawMediaGuidParameter;
    
            if (rawMediaGuid.HasValue)
            {
                rawMediaGuidParameter = new ObjectParameter("RawMediaGuid", rawMediaGuid);
            }
            else
            {
                rawMediaGuidParameter = new ObjectParameter("RawMediaGuid", typeof(System.Guid));
            }
    
            ObjectParameter expiry_DateParameter;
    
            if (expiry_Date.HasValue)
            {
                expiry_DateParameter = new ObjectParameter("Expiry_Date", expiry_Date);
            }
            else
            {
                expiry_DateParameter = new ObjectParameter("Expiry_Date", typeof(System.DateTime));
            }
    
            ObjectParameter iQAgentResultIDParameter;
    
            if (iQAgentResultID.HasValue)
            {
                iQAgentResultIDParameter = new ObjectParameter("IQAgentResultID", iQAgentResultID);
            }
            else
            {
                iQAgentResultIDParameter = new ObjectParameter("IQAgentResultID", typeof(long));
            }
    
            ObjectParameter dataModelTypeParameter;
    
            if (dataModelType != null)
            {
                dataModelTypeParameter = new ObjectParameter("DataModelType", dataModelType);
            }
            else
            {
                dataModelTypeParameter = new ObjectParameter("DataModelType", typeof(string));
            }
            return base.ExecuteFunction<IQAgentIframe>("InsertIQAgentIframe", rawMediaGuidParameter, expiry_DateParameter, iQAgentResultIDParameter, dataModelTypeParameter);
        }
        public ObjectResult<IQAgentRawMedia> GetSearchTermByIQAgent_TVResultsID(Nullable<long> iQAgentTVResultID)
        {
    
            ObjectParameter iQAgentTVResultIDParameter;
    
            if (iQAgentTVResultID.HasValue)
            {
                iQAgentTVResultIDParameter = new ObjectParameter("IQAgentTVResultID", iQAgentTVResultID);
            }
            else
            {
                iQAgentTVResultIDParameter = new ObjectParameter("IQAgentTVResultID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentRawMedia>("GetSearchTermByIQAgent_TVResultsID", iQAgentTVResultIDParameter);
        }
        public ObjectResult<IQAgentTVResults> GetIQagent_TVResults_ByID(Nullable<long> iD)
        {
    
            ObjectParameter iDParameter;
    
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentTVResults>("GetIQagent_TVResults_ByID", iDParameter);
        }
        public ObjectResult<IQCoreRecordFile> GetIQCoreRecordFileLocationByGUID(Nullable<System.Guid> rLVideoGUID)
        {
    
            ObjectParameter rLVideoGUIDParameter;
    
            if (rLVideoGUID.HasValue)
            {
                rLVideoGUIDParameter = new ObjectParameter("RLVideoGUID", rLVideoGUID);
            }
            else
            {
                rLVideoGUIDParameter = new ObjectParameter("RLVideoGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<IQCoreRecordFile>("GetIQCoreRecordFileLocationByGUID", rLVideoGUIDParameter);
        }
        public ObjectResult<IQCoreRootPath> getIQCoreRootPathByID(Nullable<long> iD)
        {
    
            ObjectParameter iDParameter;
    
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(long));
            }
            return base.ExecuteFunction<IQCoreRootPath>("getIQCoreRootPathByID", iDParameter);
        }
        public ObjectResult<string> GetRemoteSvcUrlByRootPathID(Nullable<long> rootPathID)
        {
    
            ObjectParameter rootPathIDParameter;
    
            if (rootPathID.HasValue)
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", rootPathID);
            }
            else
            {
                rootPathIDParameter = new ObjectParameter("RootPathID", typeof(long));
            }
            return base.ExecuteFunction<string>("GetRemoteSvcUrlByRootPathID", rootPathIDParameter);
        }
        public ObjectResult<IQAgentSearchTerm> GetSearchTermBy_IQAgent_NMResultsID(Nullable<long> iQAgent_NMResultID)
        {
    
            ObjectParameter iQAgent_NMResultIDParameter;
    
            if (iQAgent_NMResultID.HasValue)
            {
                iQAgent_NMResultIDParameter = new ObjectParameter("IQAgent_NMResultID", iQAgent_NMResultID);
            }
            else
            {
                iQAgent_NMResultIDParameter = new ObjectParameter("IQAgent_NMResultID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentSearchTerm>("GetSearchTermBy_IQAgent_NMResultsID", iQAgent_NMResultIDParameter);
        }
        public ObjectResult<IQAgentSearchTerm> GetSearchTermBy_IQAgent_SMResultsID(Nullable<long> iQAgent_SMResultID)
        {
    
            ObjectParameter iQAgent_SMResultIDParameter;
    
            if (iQAgent_SMResultID.HasValue)
            {
                iQAgent_SMResultIDParameter = new ObjectParameter("IQAgent_SMResultID", iQAgent_SMResultID);
            }
            else
            {
                iQAgent_SMResultIDParameter = new ObjectParameter("IQAgent_SMResultID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentSearchTerm>("GetSearchTermBy_IQAgent_SMResultsID", iQAgent_SMResultIDParameter);
        }
        public ObjectResult<NielsenData> GetNielSenDataByRecordFileGuidList(string guidList, Nullable<System.Guid> clientGuid)
        {
    
            ObjectParameter guidListParameter;
    
            if (guidList != null)
            {
                guidListParameter = new ObjectParameter("GuidList", guidList);
            }
            else
            {
                guidListParameter = new ObjectParameter("GuidList", typeof(string));
            }
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<NielsenData>("GetNielSenDataByRecordFileGuidList", guidListParameter, clientGuidParameter);
        }
        public ObjectResult<CompeteDataDB> GetCompeteDataByClientGuidAndXml(Nullable<System.Guid> clientGuid, string publicationXml, string mediaType)
        {
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
    
            ObjectParameter publicationXmlParameter;
    
            if (publicationXml != null)
            {
                publicationXmlParameter = new ObjectParameter("PublicationXml", publicationXml);
            }
            else
            {
                publicationXmlParameter = new ObjectParameter("PublicationXml", typeof(string));
            }
    
            ObjectParameter mediaTypeParameter;
    
            if (mediaType != null)
            {
                mediaTypeParameter = new ObjectParameter("MediaType", mediaType);
            }
            else
            {
                mediaTypeParameter = new ObjectParameter("MediaType", typeof(string));
            }
            return base.ExecuteFunction<CompeteDataDB>("GetCompeteDataByClientGuidAndXml", clientGuidParameter, publicationXmlParameter, mediaTypeParameter);
        }
        public ObjectResult<Nullable<bool>> CheckForCompeteDataAccessByClientGUID(Nullable<System.Guid> clientGUID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckForCompeteDataAccessByClientGUID", clientGUIDParameter);
        }
        public ObjectResult<Nullable<bool>> GetStationSharingByClipIDNClientGUID(Nullable<System.Guid> clipID, Nullable<System.Guid> clientGuid, Nullable<System.Guid> customerGuid)
        {
    
            ObjectParameter clipIDParameter;
    
            if (clipID.HasValue)
            {
                clipIDParameter = new ObjectParameter("ClipID", clipID);
            }
            else
            {
                clipIDParameter = new ObjectParameter("ClipID", typeof(System.Guid));
            }
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
    
            ObjectParameter customerGuidParameter;
    
            if (customerGuid.HasValue)
            {
                customerGuidParameter = new ObjectParameter("CustomerGuid", customerGuid);
            }
            else
            {
                customerGuidParameter = new ObjectParameter("CustomerGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<bool>>("GetStationSharingByClipIDNClientGUID", clipIDParameter, clientGuidParameter, customerGuidParameter);
        }
        public ObjectResult<IQAgentSearchTerm> GetSearchTermBy_IQAgent_TwitterResultsID(Nullable<long> iQAgent_TwitterResultID)
        {
    
            ObjectParameter iQAgent_TwitterResultIDParameter;
    
            if (iQAgent_TwitterResultID.HasValue)
            {
                iQAgent_TwitterResultIDParameter = new ObjectParameter("IQAgent_TwitterResultID", iQAgent_TwitterResultID);
            }
            else
            {
                iQAgent_TwitterResultIDParameter = new ObjectParameter("IQAgent_TwitterResultID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentSearchTerm>("GetSearchTermBy_IQAgent_TwitterResultsID", iQAgent_TwitterResultIDParameter);
        }
        public ObjectResult<Nullable<System.Guid>> GetRecordfileByGuid(Nullable<System.Guid> guid)
        {
    
            ObjectParameter guidParameter;
    
            if (guid.HasValue)
            {
                guidParameter = new ObjectParameter("Guid", guid);
            }
            else
            {
                guidParameter = new ObjectParameter("Guid", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("GetRecordfileByGuid", guidParameter);
        }
        public ObjectResult<string> CheckIQLicenseByCustomerID(Nullable<System.Guid> clientGUID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
            return base.ExecuteFunction<string>("CheckIQLicenseByCustomerID", clientGUIDParameter);
        }
        public ObjectResult<TimeSyncData> GetIQTimeSyncDataByClipGuid(Nullable<System.Guid> clipGuid)
        {
    
            ObjectParameter clipGuidParameter;
    
            if (clipGuid.HasValue)
            {
                clipGuidParameter = new ObjectParameter("ClipGuid", clipGuid);
            }
            else
            {
                clipGuidParameter = new ObjectParameter("ClipGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<TimeSyncData>("GetIQTimeSyncDataByClipGuid", clipGuidParameter);
        }
        public ObjectResult<Nullable<int>> InsertIQClipTimeSyncData(Nullable<System.Guid> clipGuid, string xmlData)
        {
    
            ObjectParameter clipGuidParameter;
    
            if (clipGuid.HasValue)
            {
                clipGuidParameter = new ObjectParameter("ClipGuid", clipGuid);
            }
            else
            {
                clipGuidParameter = new ObjectParameter("ClipGuid", typeof(System.Guid));
            }
    
            ObjectParameter xmlDataParameter;
    
            if (xmlData != null)
            {
                xmlDataParameter = new ObjectParameter("XmlData", xmlData);
            }
            else
            {
                xmlDataParameter = new ObjectParameter("XmlData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertIQClipTimeSyncData", clipGuidParameter, xmlDataParameter);
        }
        public ObjectResult<SolrEngines> GetSolrEngines(string requestor)
        {
    
            ObjectParameter requestorParameter;
    
            if (requestor != null)
            {
                requestorParameter = new ObjectParameter("Requestor", requestor);
            }
            else
            {
                requestorParameter = new ObjectParameter("Requestor", typeof(string));
            }
            return base.ExecuteFunction<SolrEngines>("GetSolrEngines", requestorParameter);
        }
        public ObjectResult<IQAgentSearchTerm> GetSearchTermBy_IQAgent_PQResultsID(Nullable<long> iQAgent_PQResultID)
        {
    
            ObjectParameter iQAgent_PQResultIDParameter;
    
            if (iQAgent_PQResultID.HasValue)
            {
                iQAgent_PQResultIDParameter = new ObjectParameter("IQAgent_PQResultID", iQAgent_PQResultID);
            }
            else
            {
                iQAgent_PQResultIDParameter = new ObjectParameter("IQAgent_PQResultID", typeof(long));
            }
            return base.ExecuteFunction<IQAgentSearchTerm>("GetSearchTermBy_IQAgent_PQResultsID", iQAgent_PQResultIDParameter);
        }
        public ObjectResult<Nullable<int>> UpdateRawMediaSecondsPlayed(Nullable<long> iD, Nullable<short> secondsPlayed)
        {
    
            ObjectParameter iDParameter;
    
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(long));
            }
    
            ObjectParameter secondsPlayedParameter;
    
            if (secondsPlayed.HasValue)
            {
                secondsPlayedParameter = new ObjectParameter("SecondsPlayed", secondsPlayed);
            }
            else
            {
                secondsPlayedParameter = new ObjectParameter("SecondsPlayed", typeof(short));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateRawMediaSecondsPlayed", iDParameter, secondsPlayedParameter);
        }

        #endregion
    }
}
