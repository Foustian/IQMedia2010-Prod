//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace IQMediaGroup.ExposeApi.Domain
{
    public partial class IQMediaGroupExposeEntities : ObjectContext
    {
        public const string ConnectionString = "name=IQMediaGroupExposeEntities";
        public const string ContainerName = "IQMediaGroupExposeEntities";
    
        #region Constructors
    
        public IQMediaGroupExposeEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupExposeEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaGroupExposeEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<PMGSearchLog> PMGSearchLogs
        {
            get { return _pMGSearchLogs  ?? (_pMGSearchLogs = CreateObjectSet<PMGSearchLog>("PMGSearchLogs")); }
        }
        private ObjectSet<PMGSearchLog> _pMGSearchLogs;

        #endregion
        #region Function Imports
        public ObjectResult<Nullable<int>> AuthenticateCustomer(string email, string password)
        {
    
            ObjectParameter emailParameter;
    
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("AuthenticateCustomer", emailParameter, passwordParameter);
        }
        public ObjectResult<RadioStation> GetRadioStation()
        {
            return base.ExecuteFunction<RadioStation>("GetRadioStation");
        }
        public ObjectResult<RadioStationDB> GetRadioStationWithTime(string stationID)
        {
    
            ObjectParameter stationIDParameter;
    
            if (stationID != null)
            {
                stationIDParameter = new ObjectParameter("StationID", stationID);
            }
            else
            {
                stationIDParameter = new ObjectParameter("StationID", typeof(string));
            }
            return base.ExecuteFunction<RadioStationDB>("GetRadioStationWithTime", stationIDParameter);
        }
        public ObjectResult<RadioRawMediaDB> GetRadioRawMedia(string iQCCKey, Nullable<int> pageNumber, Nullable<int> pageSize, string sortField, ObjectParameter totalRecordsCount)
        {
    
            ObjectParameter iQCCKeyParameter;
    
            if (iQCCKey != null)
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", iQCCKey);
            }
            else
            {
                iQCCKeyParameter = new ObjectParameter("IQCCKey", typeof(string));
            }
    
            ObjectParameter pageNumberParameter;
    
            if (pageNumber.HasValue)
            {
                pageNumberParameter = new ObjectParameter("PageNumber", pageNumber);
            }
            else
            {
                pageNumberParameter = new ObjectParameter("PageNumber", typeof(int));
            }
    
            ObjectParameter pageSizeParameter;
    
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(int));
            }
    
            ObjectParameter sortFieldParameter;
    
            if (sortField != null)
            {
                sortFieldParameter = new ObjectParameter("SortField", sortField);
            }
            else
            {
                sortFieldParameter = new ObjectParameter("SortField", typeof(string));
            }
            return base.ExecuteFunction<RadioRawMediaDB>("GetRadioRawMedia", iQCCKeyParameter, pageNumberParameter, pageSizeParameter, sortFieldParameter, totalRecordsCount);
        }
        public ObjectResult<Nullable<System.Guid>> GetRecordFileGUIDByStatioIDANDDatetime(Nullable<System.DateTime> date, string stationID, Nullable<bool> isDayLightSaving, Nullable<bool> isGMTDateTime)
        {
    
            ObjectParameter dateParameter;
    
            if (date.HasValue)
            {
                dateParameter = new ObjectParameter("Date", date);
            }
            else
            {
                dateParameter = new ObjectParameter("Date", typeof(System.DateTime));
            }
    
            ObjectParameter stationIDParameter;
    
            if (stationID != null)
            {
                stationIDParameter = new ObjectParameter("StationID", stationID);
            }
            else
            {
                stationIDParameter = new ObjectParameter("StationID", typeof(string));
            }
    
            ObjectParameter isDayLightSavingParameter;
    
            if (isDayLightSaving.HasValue)
            {
                isDayLightSavingParameter = new ObjectParameter("IsDayLightSaving", isDayLightSaving);
            }
            else
            {
                isDayLightSavingParameter = new ObjectParameter("IsDayLightSaving", typeof(bool));
            }
    
            ObjectParameter isGMTDateTimeParameter;
    
            if (isGMTDateTime.HasValue)
            {
                isGMTDateTimeParameter = new ObjectParameter("IsGMTDateTime", isGMTDateTime);
            }
            else
            {
                isGMTDateTimeParameter = new ObjectParameter("IsGMTDateTime", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("GetRecordFileGUIDByStatioIDANDDatetime", dateParameter, stationIDParameter, isDayLightSavingParameter, isGMTDateTimeParameter);
        }
        public ObjectResult<DaySummary> GetTVIQAgentDaySummary(Nullable<System.Guid> clientGUID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> searchRequestID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
    
            ObjectParameter searchRequestIDParameter;
    
            if (searchRequestID.HasValue)
            {
                searchRequestIDParameter = new ObjectParameter("SearchRequestID", searchRequestID);
            }
            else
            {
                searchRequestIDParameter = new ObjectParameter("SearchRequestID", typeof(long));
            }
            return base.ExecuteFunction<DaySummary>("GetTVIQAgentDaySummary", clientGUIDParameter, fromDateParameter, toDateParameter, searchRequestIDParameter);
        }
        public ObjectResult<HourSummary> GetTVAgentHourSummary(Nullable<System.Guid> clientGUID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> searchRequestID)
        {
    
            ObjectParameter clientGUIDParameter;
    
            if (clientGUID.HasValue)
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", clientGUID);
            }
            else
            {
                clientGUIDParameter = new ObjectParameter("ClientGUID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
    
            ObjectParameter searchRequestIDParameter;
    
            if (searchRequestID.HasValue)
            {
                searchRequestIDParameter = new ObjectParameter("SearchRequestID", searchRequestID);
            }
            else
            {
                searchRequestIDParameter = new ObjectParameter("SearchRequestID", typeof(long));
            }
            return base.ExecuteFunction<HourSummary>("GetTVAgentHourSummary", clientGUIDParameter, fromDateParameter, toDateParameter, searchRequestIDParameter);
        }
        public ObjectResult<Nullable<bool>> CheckRoleAccessByCustomerGuidAndRoleName(Nullable<System.Guid> customerGUID, string roleName)
        {
    
            ObjectParameter customerGUIDParameter;
    
            if (customerGUID.HasValue)
            {
                customerGUIDParameter = new ObjectParameter("CustomerGUID", customerGUID);
            }
            else
            {
                customerGUIDParameter = new ObjectParameter("CustomerGUID", typeof(System.Guid));
            }
    
            ObjectParameter roleNameParameter;
    
            if (roleName != null)
            {
                roleNameParameter = new ObjectParameter("RoleName", roleName);
            }
            else
            {
                roleNameParameter = new ObjectParameter("RoleName", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckRoleAccessByCustomerGuidAndRoleName", customerGUIDParameter, roleNameParameter);
        }
        public ObjectResult<Category> GetCategoryByClientGuid(Nullable<System.Guid> clientGuid)
        {
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<Category>("GetCategoryByClientGuid", clientGuidParameter);
        }
        public ObjectResult<SolrEngines> GetSolrEngines(string requestor)
        {
    
            ObjectParameter requestorParameter;
    
            if (requestor != null)
            {
                requestorParameter = new ObjectParameter("Requestor", requestor);
            }
            else
            {
                requestorParameter = new ObjectParameter("Requestor", typeof(string));
            }
            return base.ExecuteFunction<SolrEngines>("GetSolrEngines", requestorParameter);
        }
        public ObjectResult<Nullable<long>> IQAgentMediaResultsVerifyIDByClientGUID(Nullable<long> iQAgentID, Nullable<System.Guid> clientGuid)
        {
    
            ObjectParameter iQAgentIDParameter;
    
            if (iQAgentID.HasValue)
            {
                iQAgentIDParameter = new ObjectParameter("IQAgentID", iQAgentID);
            }
            else
            {
                iQAgentIDParameter = new ObjectParameter("IQAgentID", typeof(long));
            }
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<long>>("IQAgentMediaResultsVerifyIDByClientGUID", iQAgentIDParameter, clientGuidParameter);
        }

        #endregion
    }
}
